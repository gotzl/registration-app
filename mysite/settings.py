"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import json
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY'] \
    if 'SECRET_KEY' in os.environ else None  # create a key with eg 'openssl rand -base64 32', one may also put it directly here

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.getenv('DEBUG', 'False').lower() == 'true' else False

# SECURITY WARNING: the default allows connections from everywhere!
ALLOWED_HOSTS = json.loads(os.environ['ALLOWED_HOSTS']) \
    if 'ALLOWED_HOSTS' in os.environ else ['*']

# the url of the page
URL = os.environ['URL'] \
    if 'URL' in os.environ else 'localhost'
# url path to the page, in case it's hosted under a subpath,
# ie if the app is hosted under 'www.somewhere.com/someevent/', use '/someevent' here
URL_OFFSET = os.environ['URL_OFFSET'] \
    if 'URL_OFFSET' in os.environ else '/'

# the title of the page
PAGETITLE = os.environ['PAGETITLE'] \
    if 'PAGETITLE' in os.environ else 'some-title'

# Data to store during registration: 'SubjectBase' or 'SubjectExtended', see models.py
SUBJECT_CLASS = 'SubjectBase'

try:
    from mysite.local_settings import *
except ImportError:
    raise Exception("A local_settings.py file is required to run this project")


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGES = [
    ('de', _('German')),
    ('en', _('English')),
]

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True
USE_L10N = True
USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]


# Application definition

INSTALLED_APPS = [
    'material',
    'django_tables2',
    'registration.apps.RegistrationConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'mysite.default_lang.force_default_language_middleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'mysite.pagetitle.pagetitle_context_processor',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if os.getenv('DB_TYPE', '').lower() == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.getenv('DB_NAME', 'registration'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
            'HOST': os.getenv('DB_HOST', 'postgres'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = 'static/'

# Some URL definitions
LOGIN_REDIRECT_URL = 'events'
LOGOUT_REDIRECT_URL = ''

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = os.path.join(URL_OFFSET, STATIC_URL)

LOGIN_URL = os.path.join(URL_OFFSET, 'accounts/login')
LOGIN_REDIRECT_URL = os.path.join(URL_OFFSET, LOGIN_REDIRECT_URL)
LOGOUT_REDIRECT_URL = os.path.join(URL_OFFSET, LOGOUT_REDIRECT_URL)
FORCE_SCRIPT_NAME = URL_OFFSET

BASE_URL = '%s%s'%(URL, URL_OFFSET)
